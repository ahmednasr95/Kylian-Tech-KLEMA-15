
EME_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000598  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000005c7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  000005f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030bd  00000000  00000000  000007c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a76  00000000  00000000  00003886  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d67  00000000  00000000  000042fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000374  00000000  00000000  00005064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ca  00000000  00000000  000053d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a25  00000000  00000000  000057a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  000061c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000516  00000516  0000058a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006310  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.test_init 00000016  0000044a  0000044a  000004be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.test_main 0000004a  0000034c  0000034c  000003c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_10 00000054  000002a4  000002a4  00000318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_11 00000054  000002f8  000002f8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.BLUE_LED_Initializ 0000000e  00000476  00000476  000004ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.BLUE_LED_ON 0000000e  00000484  00000484  000004f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.BLUE_LED_OFF 0000000e  00000492  00000492  00000506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.GREEN_LED_Initializ 0000000c  000004a0  000004a0  00000514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.GREEN_LED_ON 0000000c  000004ac  000004ac  00000520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.GREEN_LED_OFF 0000000c  000004b8  000004b8  0000052c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.RED_LED_Initializ 0000000c  000004c4  000004c4  00000538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.RED_LED_ON 0000000c  000004d0  000004d0  00000544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.RED_LED_OFF 0000000c  000004dc  000004dc  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.YELLOW_LED_Initializ 0000000c  000004e8  000004e8  0000055c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.YELLOW_LED_ON 0000000c  000004f4  000004f4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.YELLOW_LED_OFF 0000000c  00000500  00000500  00000574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.main    0000000a  0000050c  0000050c  00000580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.DIO_SetPin_Direction 000000fe  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.DIO_SetPin_Value 000000fe  000001a6  000001a6  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.Set_Global_INT 0000002c  00000396  00000396  0000040a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.timer0_init 0000001e  00000412  00000412  00000486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.Timer0_duty 0000001a  00000430  00000430  000004a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.libgcc.div 00000028  000003c2  000003c2  00000436  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc.div 00000028  000003ea  000003ea  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_fini 00000002  0000051e  0000051e  00000592  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_funcs_on_exit 00000002  00000520  00000520  00000594  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_simulator_exit 00000002  00000522  00000522  00000596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.exit    00000016  00000460  00000460  000004d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text._Exit   00000004  0000051a  0000051a  0000058e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
   8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
   c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  28:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_10>
  2c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_11>
  30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  34:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  38:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
  50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 86 02 	call	0x50c	; 0x50c <main>
  a0:	0c 94 30 02 	jmp	0x460	; 0x460 <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

00000516 <__bad_interrupt>:
 516:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.test_init:

0000044a <test_init>:
#include "test.h"


void test_init(){

RED_LED_Initializ();
 44a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <RED_LED_Initializ>
BLUE_LED_Initializ();
 44e:	0e 94 3b 02 	call	0x476	; 0x476 <BLUE_LED_Initializ>
GREEN_LED_Initializ();
 452:	0e 94 50 02 	call	0x4a0	; 0x4a0 <GREEN_LED_Initializ>
YELLOW_LED_Initializ();
 456:	0e 94 74 02 	call	0x4e8	; 0x4e8 <YELLOW_LED_Initializ>

timer0_init();
 45a:	0e 94 09 02 	call	0x412	; 0x412 <timer0_init>
 45e:	08 95       	ret

Disassembly of section .text.test_main:

0000034c <test_main>:
}
void test_main(){
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
	int i;
	for(i=1;i<100;i++){
 350:	c1 e0       	ldi	r28, 0x01	; 1
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	0a c0       	rjmp	.+20     	; 0x36a <test_main+0x1e>
		Timer0_duty(i);
 356:	8c 2f       	mov	r24, r28
 358:	0e 94 18 02 	call	0x430	; 0x430 <Timer0_duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35c:	8f e3       	ldi	r24, 0x3F	; 63
 35e:	9c e9       	ldi	r25, 0x9C	; 156
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <test_main+0x14>
 364:	00 c0       	rjmp	.+0      	; 0x366 <test_main+0x1a>
 366:	00 00       	nop

timer0_init();
}
void test_main(){
	int i;
	for(i=1;i<100;i++){
 368:	21 96       	adiw	r28, 0x01	; 1
 36a:	c4 36       	cpi	r28, 0x64	; 100
 36c:	d1 05       	cpc	r29, r1
 36e:	9c f3       	brlt	.-26     	; 0x356 <test_main+0xa>
 370:	c3 e6       	ldi	r28, 0x63	; 99
 372:	d0 e0       	ldi	r29, 0x00	; 0
 374:	0a c0       	rjmp	.+20     	; 0x38a <test_main+0x3e>
		Timer0_duty(i);
		_delay_ms(10);
	}
	for(i=99;i>0;i--){
		Timer0_duty(i);
 376:	8c 2f       	mov	r24, r28
 378:	0e 94 18 02 	call	0x430	; 0x430 <Timer0_duty>
 37c:	8f e3       	ldi	r24, 0x3F	; 63
 37e:	9c e9       	ldi	r25, 0x9C	; 156
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <test_main+0x34>
 384:	00 c0       	rjmp	.+0      	; 0x386 <test_main+0x3a>
 386:	00 00       	nop
	int i;
	for(i=1;i<100;i++){
		Timer0_duty(i);
		_delay_ms(10);
	}
	for(i=99;i>0;i--){
 388:	21 97       	sbiw	r28, 0x01	; 1
 38a:	1c 16       	cp	r1, r28
 38c:	1d 06       	cpc	r1, r29
 38e:	9c f3       	brlt	.-26     	; 0x376 <test_main+0x2a>
		Timer0_duty(i);
		_delay_ms(10);
	}

}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

Disassembly of section .text.__vector_10:

000002a4 <__vector_10>:
ISR(VECTOR(10)){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	RED_LED_ON();
 2c6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <RED_LED_ON>
	BLUE_LED_ON();
 2ca:	0e 94 42 02 	call	0x484	; 0x484 <BLUE_LED_ON>
	GREEN_LED_OFF();
 2ce:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GREEN_LED_OFF>
	YELLOW_LED_OFF();
 2d2:	0e 94 80 02 	call	0x500	; 0x500 <YELLOW_LED_OFF>
	
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

Disassembly of section .text.__vector_11:

000002f8 <__vector_11>:
ISR(VECTOR(11)){
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	6f 93       	push	r22
 30c:	7f 93       	push	r23
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
	RED_LED_OFF();
 31a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <RED_LED_OFF>
	BLUE_LED_OFF();
 31e:	0e 94 49 02 	call	0x492	; 0x492 <BLUE_LED_OFF>
	GREEN_LED_ON();
 322:	0e 94 56 02 	call	0x4ac	; 0x4ac <GREEN_LED_ON>
	YELLOW_LED_ON();
 326:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <YELLOW_LED_ON>
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

Disassembly of section .text.BLUE_LED_Initializ:

00000476 <BLUE_LED_Initializ>:

#include "BLUE_LED_Private.h"

ERROR_STATE BLUE_LED_Initializ(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Direction(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_OUTPUT);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	65 e0       	ldi	r22, 0x05	; 5
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 54 00 	call	0xa8	; 0xa8 <__data_load_end>
	return state_error;
}
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	08 95       	ret

Disassembly of section .text.BLUE_LED_ON:

00000484 <BLUE_LED_ON>:
ERROR_STATE BLUE_LED_ON(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Value(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_HIGH);
 484:	41 e0       	ldi	r20, 0x01	; 1
 486:	65 e0       	ldi	r22, 0x05	; 5
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPin_Value>
	return state_error;
}
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	08 95       	ret

Disassembly of section .text.BLUE_LED_OFF:

00000492 <BLUE_LED_OFF>:
ERROR_STATE BLUE_LED_OFF(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Value(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_LOW);
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	65 e0       	ldi	r22, 0x05	; 5
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPin_Value>
	return state_error;
}
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	08 95       	ret

Disassembly of section .text.GREEN_LED_Initializ:

000004a0 <GREEN_LED_Initializ>:
 *  Author: aliae
 */ 
#include "GREEN_LED_Private.h"

void GREEN_LED_Initializ(void){
	DIO_SetPin_Direction(GREEN_LED_PORT,GREEN_LED_PIN,GREEN_LED_OUTPUT);
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	64 e0       	ldi	r22, 0x04	; 4
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 54 00 	call	0xa8	; 0xa8 <__data_load_end>
 4aa:	08 95       	ret

Disassembly of section .text.GREEN_LED_ON:

000004ac <GREEN_LED_ON>:
}
void GREEN_LED_ON(void){
	DIO_SetPin_Value(GREEN_LED_PORT,GREEN_LED_PIN,GREEN_LED_HIGH);
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	64 e0       	ldi	r22, 0x04	; 4
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPin_Value>
 4b6:	08 95       	ret

Disassembly of section .text.GREEN_LED_OFF:

000004b8 <GREEN_LED_OFF>:
}
void GREEN_LED_OFF(void){
	DIO_SetPin_Value(GREEN_LED_PORT,GREEN_LED_PIN,GREEN_LED_LOW);
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	64 e0       	ldi	r22, 0x04	; 4
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPin_Value>
 4c2:	08 95       	ret

Disassembly of section .text.RED_LED_Initializ:

000004c4 <RED_LED_Initializ>:
 */ 

#include "RED_LED_Private.h"

void RED_LED_Initializ(void){
	DIO_SetPin_Direction(RED_LED_PORT,RED_LED_PIN,RED_LED_OUTPUT);
 4c4:	41 e0       	ldi	r20, 0x01	; 1
 4c6:	67 e0       	ldi	r22, 0x07	; 7
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 54 00 	call	0xa8	; 0xa8 <__data_load_end>
 4ce:	08 95       	ret

Disassembly of section .text.RED_LED_ON:

000004d0 <RED_LED_ON>:
}
void RED_LED_ON(void){
	DIO_SetPin_Value(RED_LED_PORT,RED_LED_PIN,RED_LED_HIGH);
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	67 e0       	ldi	r22, 0x07	; 7
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPin_Value>
 4da:	08 95       	ret

Disassembly of section .text.RED_LED_OFF:

000004dc <RED_LED_OFF>:
}
void RED_LED_OFF(void){
	DIO_SetPin_Value(RED_LED_PORT,RED_LED_PIN,RED_LED_LOW);
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	67 e0       	ldi	r22, 0x07	; 7
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPin_Value>
 4e6:	08 95       	ret

Disassembly of section .text.YELLOW_LED_Initializ:

000004e8 <YELLOW_LED_Initializ>:
 *  Author: aliae
 */ 
#include "YELLOW_LED_Private.h"

void YELLOW_LED_Initializ(void){
	DIO_SetPin_Direction(YELLOW_LED_PORT,YELLOW_LED_PIN,YELLOW_LED_OUTPUT);
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	66 e0       	ldi	r22, 0x06	; 6
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 54 00 	call	0xa8	; 0xa8 <__data_load_end>
 4f2:	08 95       	ret

Disassembly of section .text.YELLOW_LED_ON:

000004f4 <YELLOW_LED_ON>:
}
void YELLOW_LED_ON(void){
	DIO_SetPin_Value(YELLOW_LED_PORT,YELLOW_LED_PIN,YELLOW_LED_HIGH);
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	66 e0       	ldi	r22, 0x06	; 6
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPin_Value>
 4fe:	08 95       	ret

Disassembly of section .text.YELLOW_LED_OFF:

00000500 <YELLOW_LED_OFF>:
}
void YELLOW_LED_OFF(void){
	DIO_SetPin_Value(YELLOW_LED_PORT,YELLOW_LED_PIN,YELLOW_LED_LOW);
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	66 e0       	ldi	r22, 0x06	; 6
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPin_Value>
 50a:	08 95       	ret

Disassembly of section .text.main:

0000050c <main>:

#include "main.h"


int main() {
	test_init();
 50c:	0e 94 25 02 	call	0x44a	; 0x44a <test_init>
	//initializations();
while(1){
	//keypad_input();
	test_main();
 510:	0e 94 a6 01 	call	0x34c	; 0x34c <test_main>
 514:	fd cf       	rjmp	.-6      	; 0x510 <main+0x4>

Disassembly of section .text.DIO_SetPin_Direction:

000000a8 <DIO_SetPin_Direction>:
#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
	switch (state)
  a8:	44 23       	and	r20, r20
  aa:	19 f0       	breq	.+6      	; 0xb2 <DIO_SetPin_Direction+0xa>
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	e9 f1       	breq	.+122    	; 0x12a <DIO_SetPin_Direction+0x82>
  b0:	74 c0       	rjmp	.+232    	; 0x19a <DIO_SetPin_Direction+0xf2>
	{
		case DIO_INPUT:
		switch(port)
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	99 f0       	breq	.+38     	; 0xdc <DIO_SetPin_Direction+0x34>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <DIO_SetPin_Direction+0x1a>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	e9 f0       	breq	.+58     	; 0xf6 <DIO_SetPin_Direction+0x4e>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	41 f1       	breq	.+80     	; 0x110 <DIO_SetPin_Direction+0x68>
  c0:	6e c0       	rjmp	.+220    	; 0x19e <DIO_SetPin_Direction+0xf6>
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPin_Direction+0x26>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPin_Direction+0x22>
  d2:	80 95       	com	r24
  d4:	82 23       	and	r24, r18
  d6:	8a bb       	out	0x1a, r24	; 26

#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
  d8:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_INPUT:
		switch(port)
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
			break;
  da:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPin_Direction+0x40>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPin_Direction+0x3c>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23

#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
  f2:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
			break;
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
			break;
  f4:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  f6:	24 b3       	in	r18, 0x14	; 20
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPin_Direction+0x5a>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPin_Direction+0x56>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20

#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 10c:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
			break;
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
			break;
 10e:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 110:	21 b3       	in	r18, 0x11	; 17
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_SetPin_Direction+0x74>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_SetPin_Direction+0x70>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	81 bb       	out	0x11, r24	; 17

#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 126:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
			break;
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
			break;
 128:	08 95       	ret
			state_error = FAIL;
			break;
		}
		break;
		case DIO_OUTPUT:
		switch(port)
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 f0       	breq	.+36     	; 0x152 <DIO_SetPin_Direction+0xaa>
 12e:	28 f0       	brcs	.+10     	; 0x13a <DIO_SetPin_Direction+0x92>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	d9 f0       	breq	.+54     	; 0x16a <DIO_SetPin_Direction+0xc2>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	29 f1       	breq	.+74     	; 0x182 <DIO_SetPin_Direction+0xda>
 138:	34 c0       	rjmp	.+104    	; 0x1a2 <DIO_SetPin_Direction+0xfa>
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 13a:	2a b3       	in	r18, 0x1a	; 26
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPin_Direction+0x9e>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPin_Direction+0x9a>
 14a:	82 2b       	or	r24, r18
 14c:	8a bb       	out	0x1a, r24	; 26

#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 14e:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_OUTPUT:
		switch(port)
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
			break;
 150:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_SetPin_Direction+0xb6>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_SetPin_Direction+0xb2>
 162:	82 2b       	or	r24, r18
 164:	87 bb       	out	0x17, r24	; 23

#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 166:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
			break;
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
			break;
 168:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SetPin_Direction+0xce>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SetPin_Direction+0xca>
 17a:	82 2b       	or	r24, r18
 17c:	84 bb       	out	0x14, r24	; 20

#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 17e:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
			break;
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
			break;
 180:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 182:	21 b3       	in	r18, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPin_Direction+0xe6>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPin_Direction+0xe2>
 192:	82 2b       	or	r24, r18
 194:	81 bb       	out	0x11, r24	; 17

#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 196:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
			break;
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
			break;
 198:	08 95       	ret

#include "DIO_Private.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	08 95       	ret
			break;
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
			break;
			default:
			state_error = FAIL;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
			break;
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
			break;
			default:
			state_error = FAIL;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		break;
	}
	return state_error;
}
 1a4:	08 95       	ret

Disassembly of section .text.DIO_SetPin_Value:

000001a6 <DIO_SetPin_Value>:

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
	switch (status)
 1a6:	44 23       	and	r20, r20
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <DIO_SetPin_Value+0xa>
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	e9 f1       	breq	.+122    	; 0x228 <DIO_SetPin_Value+0x82>
 1ae:	74 c0       	rjmp	.+232    	; 0x298 <DIO_SetPin_Value+0xf2>
	{
		case DIO_LOW:
		switch(port)
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	99 f0       	breq	.+38     	; 0x1da <DIO_SetPin_Value+0x34>
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <DIO_SetPin_Value+0x1a>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	e9 f0       	breq	.+58     	; 0x1f4 <DIO_SetPin_Value+0x4e>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	41 f1       	breq	.+80     	; 0x20e <DIO_SetPin_Value+0x68>
 1be:	6e c0       	rjmp	.+220    	; 0x29c <DIO_SetPin_Value+0xf6>
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 1c0:	2b b3       	in	r18, 0x1b	; 27
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPin_Value+0x26>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPin_Value+0x22>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	8b bb       	out	0x1b, r24	; 27
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_LOW:
		switch(port)
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
			break;
 1d8:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1da:	28 b3       	in	r18, 0x18	; 24
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_SetPin_Value+0x40>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_SetPin_Value+0x3c>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	88 bb       	out	0x18, r24	; 24
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
			break;
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
			break;
 1f2:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1f4:	25 b3       	in	r18, 0x15	; 21
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_SetPin_Value+0x5a>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_SetPin_Value+0x56>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	85 bb       	out	0x15, r24	; 21
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 20a:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
			break;
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
			break;
 20c:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 20e:	22 b3       	in	r18, 0x12	; 18
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPin_Value+0x74>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPin_Value+0x70>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	82 bb       	out	0x12, r24	; 18
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 224:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
			break;
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
			break;
 226:	08 95       	ret
			state_error = FAIL;
			break;
		}
		break;
		case DIO_HIGH:
		switch(port)
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	91 f0       	breq	.+36     	; 0x250 <DIO_SetPin_Value+0xaa>
 22c:	28 f0       	brcs	.+10     	; 0x238 <DIO_SetPin_Value+0x92>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	d9 f0       	breq	.+54     	; 0x268 <DIO_SetPin_Value+0xc2>
 232:	83 30       	cpi	r24, 0x03	; 3
 234:	29 f1       	breq	.+74     	; 0x280 <DIO_SetPin_Value+0xda>
 236:	34 c0       	rjmp	.+104    	; 0x2a0 <DIO_SetPin_Value+0xfa>
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 238:	2b b3       	in	r18, 0x1b	; 27
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_SetPin_Value+0x9e>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_SetPin_Value+0x9a>
 248:	82 2b       	or	r24, r18
 24a:	8b bb       	out	0x1b, r24	; 27
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 24c:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_HIGH:
		switch(port)
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
			break;
 24e:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPin_Value+0xb6>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPin_Value+0xb2>
 260:	82 2b       	or	r24, r18
 262:	88 bb       	out	0x18, r24	; 24
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 264:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
			break;
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
			break;
 266:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 268:	25 b3       	in	r18, 0x15	; 21
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPin_Value+0xce>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPin_Value+0xca>
 278:	82 2b       	or	r24, r18
 27a:	85 bb       	out	0x15, r24	; 21
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 27c:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
			break;
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
			break;
 27e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 280:	22 b3       	in	r18, 0x12	; 18
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPin_Value+0xe6>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPin_Value+0xe2>
 290:	82 2b       	or	r24, r18
 292:	82 bb       	out	0x12, r24	; 18
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 294:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
			break;
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
			break;
 296:	08 95       	ret
	return state_error;
}

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	08 95       	ret
			break;
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
			break;
			default:
			state_error = FAIL;
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	08 95       	ret
			break;
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
			break;
			default:
			state_error = FAIL;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		break;
	}
	return state_error;
}
 2a2:	08 95       	ret

Disassembly of section .text.Set_Global_INT:

00000396 <Set_Global_INT>:
#include "EXT_INT_Private.h"


ERROR_STATE Set_Global_INT(GLB_MODE mode){
	ERROR_STATE state_error = SUCCESS;
	SREG |= mode;
 396:	9f b7       	in	r25, 0x3f	; 63
 398:	98 2b       	or	r25, r24
 39a:	9f bf       	out	0x3f, r25	; 63
	if(mode == ON){
 39c:	80 38       	cpi	r24, 0x80	; 128
 39e:	29 f4       	brne	.+10     	; 0x3aa <Set_Global_INT+0x14>
		if(!GET_BIT(SREG,7)){
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	07 fc       	sbrc	r0, 7
 3a4:	08 c0       	rjmp	.+16     	; 0x3b6 <Set_Global_INT+0x20>
			state_error = FAIL;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret
		}else{
			state_error = SUCCESS;
		}
	}else{
		if(mode == OFF){
 3aa:	81 11       	cpse	r24, r1
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <Set_Global_INT+0x24>
			if(GET_BIT(SREG,7)){
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	07 fe       	sbrs	r0, 7
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <Set_Global_INT+0x28>
 3b4:	08 95       	ret
	SREG |= mode;
	if(mode == ON){
		if(!GET_BIT(SREG,7)){
			state_error = FAIL;
		}else{
			state_error = SUCCESS;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	08 95       	ret
				state_error = FAIL;
			}else{
				state_error = SUCCESS;
			}
		}else{
			state_error = FAIL;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	08 95       	ret
	}else{
		if(mode == OFF){
			if(GET_BIT(SREG,7)){
				state_error = FAIL;
			}else{
				state_error = SUCCESS;
 3be:	81 e0       	ldi	r24, 0x01	; 1
		}else{
			state_error = FAIL;
		}
	}
	return state_error;
}
 3c0:	08 95       	ret

Disassembly of section .text.timer0_init:

00000412 <timer0_init>:
 */ 
#include "TIMER0_Private.h"


void timer0_init(){
	DIO_SetPin_Direction(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 54 00 	call	0xa8	; 0xa8 <__data_load_end>
	Set_Global_INT(ON);
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	0e 94 cb 01 	call	0x396	; 0x396 <Set_Global_INT>
	TCCR0 = 0x6B;
 422:	8b e6       	ldi	r24, 0x6B	; 107
 424:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 426:	12 be       	out	0x32, r1	; 50
	TIMSK = 0x03;
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	89 bf       	out	0x39, r24	; 57
	OCR0=0;
 42c:	1c be       	out	0x3c, r1	; 60
 42e:	08 95       	ret

Disassembly of section .text.Timer0_duty:

00000430 <Timer0_duty>:
}

void Timer0_duty(uint8_t dutycycle){
	if(dutycycle <= 100 && dutycycle >=0){
 430:	85 36       	cpi	r24, 0x65	; 101
 432:	48 f4       	brcc	.+18     	; 0x446 <Timer0_duty+0x16>
		OCR0 = ((256*dutycycle)/100)-1;
 434:	98 2f       	mov	r25, r24
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	64 e6       	ldi	r22, 0x64	; 100
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divmodhi4>
 440:	61 50       	subi	r22, 0x01	; 1
 442:	6c bf       	out	0x3c, r22	; 60
 444:	08 95       	ret
	}else{
		OCR0 = 0;
 446:	1c be       	out	0x3c, r1	; 60
 448:	08 95       	ret

Disassembly of section .text.libgcc.div:

000003c2 <__divmodhi4>:
 3c2:	97 fb       	bst	r25, 7
 3c4:	07 2e       	mov	r0, r23
 3c6:	16 f4       	brtc	.+4      	; 0x3cc <__divmodhi4+0xa>
 3c8:	00 94       	com	r0
 3ca:	07 d0       	rcall	.+14     	; 0x3da <__divmodhi4_neg1>
 3cc:	77 fd       	sbrc	r23, 7
 3ce:	09 d0       	rcall	.+18     	; 0x3e2 <__divmodhi4_neg2>
 3d0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__udivmodhi4>
 3d4:	07 fc       	sbrc	r0, 7
 3d6:	05 d0       	rcall	.+10     	; 0x3e2 <__divmodhi4_neg2>
 3d8:	3e f4       	brtc	.+14     	; 0x3e8 <__divmodhi4_exit>

000003da <__divmodhi4_neg1>:
 3da:	90 95       	com	r25
 3dc:	81 95       	neg	r24
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	08 95       	ret

000003e2 <__divmodhi4_neg2>:
 3e2:	70 95       	com	r23
 3e4:	61 95       	neg	r22
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255

000003e8 <__divmodhi4_exit>:
 3e8:	08 95       	ret

Disassembly of section .text.libgcc.div:

000003ea <__udivmodhi4>:
 3ea:	aa 1b       	sub	r26, r26
 3ec:	bb 1b       	sub	r27, r27
 3ee:	51 e1       	ldi	r21, 0x11	; 17
 3f0:	07 c0       	rjmp	.+14     	; 0x400 <__udivmodhi4_ep>

000003f2 <__udivmodhi4_loop>:
 3f2:	aa 1f       	adc	r26, r26
 3f4:	bb 1f       	adc	r27, r27
 3f6:	a6 17       	cp	r26, r22
 3f8:	b7 07       	cpc	r27, r23
 3fa:	10 f0       	brcs	.+4      	; 0x400 <__udivmodhi4_ep>
 3fc:	a6 1b       	sub	r26, r22
 3fe:	b7 0b       	sbc	r27, r23

00000400 <__udivmodhi4_ep>:
 400:	88 1f       	adc	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	5a 95       	dec	r21
 406:	a9 f7       	brne	.-22     	; 0x3f2 <__udivmodhi4_loop>
 408:	80 95       	com	r24
 40a:	90 95       	com	r25
 40c:	bc 01       	movw	r22, r24
 40e:	cd 01       	movw	r24, r26
 410:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000051e <_fini>:
 51e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000520 <__funcs_on_exit>:
 520:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000522 <__simulator_exit>:
 522:	08 95       	ret

Disassembly of section .text.exit:

00000460 <exit>:
 460:	ec 01       	movw	r28, r24
 462:	0e 94 90 02 	call	0x520	; 0x520 <__funcs_on_exit>
 466:	0e 94 8f 02 	call	0x51e	; 0x51e <_fini>
 46a:	ce 01       	movw	r24, r28
 46c:	0e 94 91 02 	call	0x522	; 0x522 <__simulator_exit>
 470:	ce 01       	movw	r24, r28
 472:	0e 94 8d 02 	call	0x51a	; 0x51a <_Exit>

Disassembly of section .text._Exit:

0000051a <_Exit>:
 51a:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
